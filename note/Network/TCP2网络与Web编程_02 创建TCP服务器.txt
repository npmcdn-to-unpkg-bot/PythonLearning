使用socketserver库
实现一个服务器，通过TCP协议和客户端通信。

	>>>from socketserver import BaseRequestHandler, TCPServer
	
	>>>class EchoHandler(BaseRequestHandler):
			def handle(self):
			print('Got Connection from', self.client_address)
			while True:	
				msg = self.request.recv(8192)
				if not msg:
					break
				self.request.send(msg)
	
	>>>if __name__=='__main__':
			serv = TCPServer(('', 20000), EchoHandler)
			serv.serve_forever()

	这里定义了一个特殊的处理类，实现了handle()方法，用来为客户端连接服务。
	request属性是客户端socket，client_address有客户端地址。
	为了测试这个服务器，运行并打开另外一个Python进程连接这个服务器：

很多时候，可以很容易的定义一个不同的处理器。下面是一个StreamRequestHandler基类将一个类文件接口放置在底层socket上的例子：

	>>>from socketserver import StreamRequestHandler, TCPServer

	>>>class EchoHandler(StreamRequestHandler):
			def handle(self):
			print('Got connection from', self.client_address)

			for line in self.rfile:
				self.wfile.write(line)

	>>>if __name__=='__main__':
			serv = TCPServer(('',2000), EchoHandler)
			serv.serve_forever()

讨论：
	默认情况下这种服务器是单线程的，一次只能为一个客户端连接服务。如果你想处理多个客户端，可以初始化一个ForkingTCPServer或者ThreadingTCPServer对象

		if __name__=='__main__':
			serv = ThreadingTCPServer(('', 20000), EchoHandler)
			serv.serve_forever()
	使用fork或线程服务器有个潜在问题就是它们会为每个客户端连接创建一个新的进程或线程。 由于客户端连接数是没有限制的，因此一个恶意的黑客可以同时发送大量的连接让你的服务器奔溃。
	可以创建一个预先分配大小的工作线程池或进程池。 你先创建一个普通的非线程服务器，然后在一个线程池中使用 serve_forever() 方法来启动它们。