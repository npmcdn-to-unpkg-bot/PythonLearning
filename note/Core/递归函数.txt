递归函数的优点在于定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。

需要注意防止栈溢出。
在计算机中，函数调用是通过栈(stack)这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。

def fact(n):
    if n==1:
        return 1
    return n * fact(n - 1)
===> fact(5)
===> 5 * fact(4)
===> 5 * (4 * fact(3))
===> 5 * (4 * (3 * fact(2)))
===> 5 * (4 * (3 * (2 * fact(1))))
===> 5 * (4 * (3 * (2 * 1)))
===> 5 * (4 * (3 * 2))
===> 5 * (4 * 6)
===> 5 * 24
===> 120

解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的。
尾递归是指：在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。
这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。
def fact(n):
    return fact_iter(n, 1)

def fact_iter(num, product):
    if num == 1:
        return product
    return fact_iter(num - 1, num * product)

===> fact_iter(5, 1)
===> fact_iter(4, 5)
===> fact_iter(3, 20)
===> fact_iter(2, 60)
===> fact_iter(1, 120)
===> 120
可以看到，return fact_iter(num-1, num * product)仅返回递归函数本身，num-1 和 num * product在函数调用前就会被计算，不影响函数使用。
尾递归调用时，如果做了优化，栈不会增长，无论多少次调用也不会溢出。
但大多数编程语言没有对尾递归做优化。所以，即使改成上面这样，也会溢出。

递归原则：
1.基准情形：----构成递归终止条件
2.不断推进：通过递归调用不断向递归条件推进
3.设计法则：假设所有的递归调用都能运行
4.合成效益法则：求解一个问题


范传奇：
1.相信你的方法一定可以解决问题。所以放心的在递归方法里把参数交给这个方法
2.不要进去这个方法。写个没完没了


汉诺塔：
def move(n,source,destination,assist):
     if(n==1):
          print('# %s --> %s' % (source, destination))
     else:
         move (n-1,source,assist,destination)#将前n-1个盘子从x移动到y上
         move (1,source,destination,assist)#将最底下的最后一个盘子从x移动到z上
         move (n-1,assist,destination,source)#将y上的n-1个盘子移动到z上
move(3,'A','B','C')







