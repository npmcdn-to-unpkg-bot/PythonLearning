
dict
	dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。
	这种key-value存储方式，在放进去的时候，必须根据key算出value的存放位置，这样，取的时候才能根据key直接拿到value。
	>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
	>>> d['Michael']
	95
	多次对一个key放入value，后面的值会把前面的值冲掉。

	如果key不存在，dict就会报错。
	要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：
	>>> 'Thomas' in d
	False
	二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：
	>>> d.get('Thomas')
	>>> d.get('Thomas', -1)
	-1
	注意：返回None的时候Python的交互式命令行不显示结果。
	要删除一个key，用pop(key)方法，对应的value也会从dict中删除。

	和list比较，dict有以下几个特点：

		1. 查找和插入的速度极快，不会随着key的增加而增加；
		2. 需要占用大量的内存，内存浪费多

	而list相反：

		1. 查找和插入的时间随着元素的增加而增加；
		2. 占用空间小，浪费内存很少。

	所以，dict是用空间来换取时间的一种方法。

	正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。
	这个通过key计算位置的算法称为哈希算法（Hash）。
	在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：

Set:
	set和dic类似，也是提供一组key的集合，但不存储value。由于key不能重复，所以在set中，没有重复的key。
	>>> s = set([1, 2, 3])
	>>> s
	{1, 2, 3s}ssdds


	>>> s = set([1, 2, 3])
	>>> s
	{1, 2, 3}

	通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果。
	通过remove(key)方法可以删除元素。

	set可以看作数学上的无序，无重复元素的集合。因此，两个set可以作数学意义上的交集、并集等操作
	set的原理和dict一样，所以，同样不可以放入可变对象。

	虽然字符串有个replace()方法，也确实变出了'Abc'，但变量a最后仍是'abc'，应该怎么理解呢？
	对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。









