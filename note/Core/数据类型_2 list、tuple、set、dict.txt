list
	是一种有序的集合，可以随时添加和删除其中的元素。
	>>> classmates = ['Michael', 'Bob', 'Tracy']
	len()函数可以获得list元素的个数：
	索引来访问list中每一个位置的元素，索引是从0开始。
	如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素
	>>> classmates[-1]
	'Tracy'
	以此类推，可以获取倒数第2个、倒数第3个：
	>>> classmates[-2]
	'Bob'
	追加元素到末尾：
	>>> classmates.append('Adam')
	把元素插入到指定的位置
	>>> classmates.insert(1, 'Jack')
	删除list末尾的元素，用pop()方法，返回该元素：
	>>> classmates.pop()
	'Adam'
	删除指定位置的元素，用pop(i)方法

	要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：
	>>> classmates[1] = 'Sarah'
	list里面的元素的数据类型也可以不同，比如：
	>>> L = ['Apple', 123, True]
	也可以是另一个list
	s = ['python', 'java', ['asp', 'php'], 'scheme']
	s2 = [s ['asp', 'php'], ]


tuple
	1.另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改
	>>> classmates = ('Michael', 'Bob', 'Tracy')
	classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用classmates[0]，classmates[-1]，但不能赋值成另外的元素。
	2.tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。
	3.只有1个元素的tuple定义时必须加一个逗号,，与数学中的括号区分
	>>> t = (1,)
	>>> t
	(1,)
	4.“可变的”tuple：
	>>> t = ('a', 'b', ['A', 'B'])
	>>> t[2][0] = 'X'
	>>> t[2][1] = 'Y'
	>>> t
	('a', 'b', ['X', 'Y'])
	tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！

dict
	dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。
	这种key-value存储方式，在放进去的时候，必须根据key算出value的存放位置，这样，取的时候才能根据key直接拿到value。
	>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
	>>> d['Michael']
	95
	多次对一个key放入value，后面的值会把前面的值冲掉。

	如果key不存在，dict就会报错。
	要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：
	>>> 'Thomas' in d
	False
	二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：
	>>> d.get('Thomas')
	>>> d.get('Thomas', -1)
	-1
	注意：返回None的时候Python的交互式命令行不显示结果。
	要删除一个key，用pop(key)方法，对应的value也会从dict中删除。

	和list比较，dict有以下几个特点：

		1. 查找和插入的速度极快，不会随着key的增加而增加；
		2. 需要占用大量的内存，内存浪费多

	而list相反：

		1. 查找和插入的时间随着元素的增加而增加；
		2. 占用空间小，浪费内存很少。

	所以，dict是用空间来换取时间的一种方法。

	正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。
	这个通过key计算位置的算法称为哈希算法（Hash）。
	在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：

Set:
	set和dic类似，也是提供一组key的集合，但不存储value。由于key不能重复，所以在set中，没有重复的key。
	>>> s = set([1, 2, 3])
	>>> s
	{1, 2, 3s}ssdds


	>>> s = set([1, 2, 3])
	>>> s
	{1, 2, 3}

	通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果。
	通过remove(key)方法可以删除元素。

	set可以看作数学上的无序，无重复元素的集合。因此，两个set可以作数学意义上的交集、并集等操作
	set的原理和dict一样，所以，同样不可以放入可变对象。

	虽然字符串有个replace()方法，也确实变出了'Abc'，但变量a最后仍是'abc'，应该怎么理解呢？
	对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。









