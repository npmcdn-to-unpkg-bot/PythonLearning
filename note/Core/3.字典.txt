字典(dictionary):
	dict()函数：使用键-值对的序列建立字典
	
	dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。
	这种key-value存储方式，在放进去的时候，必须根据key算(哈希算法Hash)出value的存放位置，这样，取的时候才能根据key直接拿到value。
	
	python中唯一内建的映射类型
	
		>>> items = [('name', 'Gumby'), ('age',42)]
		>>> d = dict(items)										//dict()函数创建
		>>> d
		{'age':42, 'name':'Gumby'}
		
		>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}			//直接创建
		>>> d['Michael']
		95
		
	1.用来格式化字符串：
		>>> print('%(cecil)s' %phonebook)	#从字典phonebook中查找key='cecil'的值 转化为字符串类型输出
	2.基本操作：
		len(dict):返回dict中键-值对的数量
		d[k]:返回关联到键k上的值
		d[k] = v
		del d[k]  删除变量
		k in d:成员资格，查找的是键而不是值。(与列表不一样，v in l 则用来查找值，而不是索引)
		has_key()
	3.字典方法：
		1.clear()	清空引用元数据
		2.copy:浅复制shallow copy：当在复本中 替换 值的时候原始字典不受影响，增删了某个值，原始字典也会变。因为同样的值也存储在原字典中
				深复制deep copy：复制其包含的所有值
		3.fromkeys:使用给定的键建立新的字典，对应None
			>>> fromkeys['name','age']
			{'age':None, 'name':None}
			也可以给定默认值
			>>> dict.fromkeys(['name', 'age'], 'unknown')
		4.get(key)安全的获取值，当访问的键不存在时，得到None
			甚至可以自定义“默认值”替换None
		5.items：将字典中所有的项以(键-值)对的列表形式返回	[('name','Tome'),('age',24)]
		  iteritems:返回一个迭代器对象，而不是列表
		6.keys：将字典中的键以列表形式返回
		  iterkeys：返回针对键的迭代器
		7.values：
		   itervalues：
		8.pop：返回对应key的值，并将键-值对从字典中移除
		  popitem：弹出字典中随机的项		(对比列表：pop弹出列表最后的项)
		9.update：利用一个字典项更新另外一个字典		增量备份
				提供的字典中的项被添加到旧字典，key相等则会覆盖
		10.setdefault：键不存在时，返回默认值
					键存在时，返回与其对应的值
	4.字典充当函数的形式参数：
		>>> def func(arg1, *argst, **argsd):		//argst元组充当可变参数， argsd字典充当
				pass
		>>> func('Hello', 'WangdaChui', 'NiuYun', a1=1, a2=2, a3=3)
						 //（字典充当）
	注意：			
		1.如果key不存在，dict就会报错。
			要避免key不存在的错误，有两种办法：
			一是通过in判断key是否存在：
				>>> 'Thomas' in d
				False
			二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：
				>>> d.get('Thomas')
				>>> d.get('Thomas', -1)
				-1
		注意：返回None的时候Python的交互式命令行不显示结果。
		要删除一个key，用pop(key)方法，对应的value也会从dict中删除。

		2.和list比较，dict有以下几个特点：

			1. 查找和插入的速度极快，不会随着key的增加而增加；
			2. 需要占用大量的内存，内存浪费多

			而list相反：

				1. 查找和插入的时间随着元素的增加而增加；
				2. 占用空间小，浪费内存很少。

			所以，dict是用空间来换取时间的一种方法。

		正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。
		在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key。