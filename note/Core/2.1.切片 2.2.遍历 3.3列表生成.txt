在Python中，代码不是越多越好，而是越少越好。
不是越复杂越好，而是越简单越好。（试问在哪门语言不是呢？）

1.切片               #截取函数
	对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）操作符

	>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
	>>> L[0:3]          #表示从0开始取，直到索引3为止，但不包含索引3
	['Michael', 'Sarah', 'Tracy']
	>>> L[:3]          #如果第一个索引是0，还可以省略

	>>> L[-2:-1]     #倒数切片，-1表示倒数第一个元素
	>>> L[-2:]     #截取至倒数第二个元素

	>>> L = list(range(100))
	>>> L[10:20:5]     #从L[10]作为第一个，每间隔5个取一个     [10,15]
	>>> L[:]          #没有条件，复制一个L

2.迭代(遍历)         
	给定一个list或tuple，可以通过for循环来遍历，这种遍历称为迭代（Iteration）
	Python的for循环抽象程度高于Java，只要是可迭代对象，无论有无下标，都可以迭代，例如dict：

		>>> d = {'a':1, 'b':2, 'c':3}       #迭代key
		>>> for key in d:
					  print(key)
		a
		c
		b
	#因为dic的存储不是按照list的方式顺序排列，所以，迭代出的结果可能不一样
		>>> for value in d.values()       #同时迭代value
		>>> for k,v in d.items()          #同时迭代key和value

	如何判断一个对象是否是可迭代对象呢？
		通过collections模块的iterable类型
		>>> from collections import Iterable
		>>> isinstance('abc', Iterable) # str是否可迭代
		True
		>>> isinstance([1,2,3], Iterable) # list是否可迭代
		True
		>>> isinstance(123, Iterable) # 整数是否可迭代
		False
	如果要对list实现类似Java的下标循环怎么办？Python内置的enumerate函数可以把一个list变成索引-元素对，
	这样可以在for循环中同时迭代索引和元素本身：

		>>> for i,value in enumerate(['A','B','C']):
				  print(i,value)
			0 A
			1 B
			2 C
	两个变量：
	>>> for x,y in [(1,1), (2,4), (3,9)]:
		   print(x,y)


	任何可迭代对象都可以作用于for循环，包括我们自定义的数据类型，只要符合迭代条件，就可以使用for循环。

3.列表生成式（List Comprehensions）：
	>>> list(range(1, 11))
	[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

	# 生成[1x1, 2x2, 3x3, ..., 10x10]
	>>> L = []
	>>> for x in range(1, 11):
			L.append(x * x)
	使用一行语句替代上述语句生成list：
	>>> [x * x for x in range(1,11)]
	[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

	#for循环后面还可以加上if判断，
	>>> [x * x for x in range(1,11) if x%2==0]
	[4, 16, 36, 64, 100]

	#还可以使用两层循环，可以生成全排列：
	>>>[m + n for m in 'ABC' for n in 'XYZz']
	['AX', 'AY', 'AZ', 'Az', 'BX', 'BY', 'BZ', 'Bz', 'CX', 'CY', 'CZ', 'Cz']

	运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，
	>>> import os # 导入os模块
	>>> [d for d in os.listdir('.')] # os.listdir可以列出文件和目录
	列表生成式也可以使用两个变量来生成list：
	>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
	>>> [k + '=' + v for k, v in d.items()]
	['y=B', 'x=A', 'z=C']
	把一个list中所有的字符串变成小写：
	>>> L = ['Hello', 'World', 'IBM', 'Apple']
	>>> [s.lower() for s in L]
	['hello', 'world', 'ibm', 'apple']

