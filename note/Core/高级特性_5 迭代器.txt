5.迭代器（Iterator）：
	直接可以作用于for循环的对象统称可迭代对象。
	包括：
	1).list，tuple，dict，set，str
	2).generator，包括生成器和带yield的generator function

	1.可以用isinstance()判断一个对象是否是Iterable对象。
	>>> from collections import Iterable
	>>> isinstance((x for x in range(10)), Iterator)
	True
	>>> isinstance([], Iterable)
	True
	2.而生成器不但可以作用于for循环，还可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值了。
	可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。
	
	使用Isinstance()判断一个对象是否是Iterator对象：
	>>> from collections import Iterator
	>>> isinstance((x for x in range(10)), Iterator)
	True
	>>> isinstance([],Iterator)
	False

	生成器都是Iterator对象，但list、dict、str虽然是Iterable，但却不是Iterator。

	把list，dic，str等Iterable变成Iterator可以使用iter()函数：
	>>> isinstance(iter([]), Iterator)
	True
	>>> isinstance(iter('abc'), Iterator)
	True

	为什么list、dict、str等数据类型不是Iterator?
		因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据
		直到没有数据时抛出StopIterator错误。
		可以把这个数据流看作一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数按需计算下一个数据，所以Iterator的计算是惰性的。

	Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。
