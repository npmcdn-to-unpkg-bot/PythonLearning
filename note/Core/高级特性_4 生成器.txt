生成器（generator）
	列表元素可以按照某种算法推算出来，这样就不必创建完整的list，从而节省大量的空间。
	在Python中，这种一边循环一边计算的机制，称为生成器：generator

创建一个生成器：

1.把一个列表生成式的[]改为()：
	>>> L = [x * x for x in range(10)]
	>>> L
	[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
	>>> g = (x * x for x in range(10))
	>>> g
	<generator object <genexpr> at 0x1022ef630>
	#打印generator的每一个元素
	>>> next(g)  # 基本上永远不会调用next()，这里仅供展示
	0
	>>> next(g)
	1
	generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，没有更多的元素时，抛出 StopIteration的错误。
	# 使用for循环
	>>> g = (x * x for x in range(10))
	>>> for n in g:
	...     print(n)
	generator非常强大。如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。

2.函数实现：
	如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator：
	# 函数，打印出斐波那契数列的前max个数
		def fib(max):
			n, a, b = 0, 0, 1
			while n < max:
				print(b)
				a, b = b, a + b
				n = n + 1
			return 'done'

	# generator生成器
		>>> def fib(max):
				n, a, b = 0, 0, 1
				while n < max:
					yield b
					a, b = b, a + b
					n = n + 1
				return 'done'
		>>> f = fib(6)
		>>> f
		<generator object fib at 0x104feaaa0>
		>>> next(f)
		>>> next(f)
		>>> next(f)
		>>> next(f)
		>>> next(f)
		1
		1
		2
		3
		5
	generator和函数的执行流程：
	函数顺序执行，遇到return语句或者最后一行函数语句就返回。
	generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。
	函数改成generator后，我们基本上从来不会用next()来获取下一个返回值，而是直接使用for循环来迭代：
		>>> for n in fib(6):
		...     print(n)
		...
	1
	1
	2
	3
	5
	8
	但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，
	返回值包含在StopIteration的value中：
		>>> g = fib(6)
		>>> while True:
		...     try:
		...         x = next(g)
		...         print('g:', x)
		...     except StopIteration as e:
		...         print('Generator return value:', e.value)
		...         break
		...
		g: 1
		g: 1
		g: 2
		g: 3
		g: 5
		g: 8
		Generator return value: done


