列表：	
	是一种有序的集合，可以随时添加和删除其中的元素。
		>>> classmates = ['Michael', 'Bob', 'Tracy']
		len()函数可以获得list元素的个数：
			索引来访问list中每一个位置的元素，索引是从0开始。
		如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素
		>>> classmates[-1]
		'Tracy'
		以此类推，可以获取倒数第2个、倒数第3个：
		>>> classmates[-2]
		'Bob'
		追加元素到末尾：
		>>> classmates.append('Adam')
	把元素插入到指定的位置
		>>> classmates.insert(1, 'Jack')
	删除list末尾的元素，用pop()方法，返回该元素：
		>>> classmates.pop()
		'Adam'
	删除指定位置的元素，用pop(i)方法

	要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：
	>>> classmates[1] = 'Sarah'
		list里面的元素的数据类型也可以不同，比如：
	>>> L = ['Apple', 123, True]
	也可以是另一个list
		s = ['python', 'java', ['asp', 'php'], 'scheme']
		s2 = [s ['asp', 'php'], ]
	
	使用list函数将序列转换为列表（Join可以将列表转换为字符串）.
	基本操作：
		1.赋值 sequence[1] = 2
		2.删除 del names[2]
		3.分片赋值 name[2:] = list['ar']		可以在不需要替换任何原有元素的情况下插入新元素
		4.分片删除：
		5.append
		6.count:
		7.extend:追加,扩展:与连接的区别在于连接会返回一个新列表 
		8.index：
		9.insert
		10.pop
		11.remove
		12.reverse
		13.sort：
			list.sort(func=None,key=None,reverse=False)
	
	# 列表解析：生成器
		动态创建列表，简单灵活有用
		[expression for expr in sequence1
					for expr2 in sequence2...
					for exprN in sequenceN					
					if condition ]
		>>> [(x+1,y**2) for x in range(1,4) for y in range(1,4)]
		[(2, 1), (2, 4), (2, 9), (3, 1), (3, 4), (3, 9), (4, 1), (4, 4), (4, 9)]
		>>> [x ** 2 for x in range(10) if x ** 2 < 50]
		[0, 1, 4, 9, 16, 25, 36, 49]

元组tuple：
	tuple()：将一个序列作为参数返回元组
	特性：	
		1.另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改
			>>> classmates = ('Michael', 'Bob', 'Tracy')
				classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的：切片，长度……
		
			tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。
		
		2.“可变的”tuple：
			>>> t = ('a', 'b', ['A', 'B'])
			>>> t[2][0] = 'X'
			>>> t[2][1] = 'Y'
			>>> t
			('a', 'b', ['X', 'Y'])
		3.只有1个元素的tuple定义时必须加一个逗号,，与数学中的括号区分
			>>> t = (1,)
			>>> t
			(1,)
		tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，
		指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！
	
	作用：1.可以在映射中当作键使用，而列表不行
		  2.作为函数的特殊类型参数：
			多个参数可以作为元组，传给函数，而元组的个数是不定长的。def func(arg1,*arg):
		  3.元组作为许多内建函数和方法的返回值存在:
				enumerate()
				>>> def func():
						return 1,2,3
				返回对象的个数	返回类型
					0			None
					1			object
					>1			tuple