函数就是最基本的一种代码抽象的方式。
内置函数：
     Python的官方网站查看文档：
     交互式命令行通过help(abs)查看abs函数的帮助信息。
	如果传入的参数数量不对，会报TypeError的错误，并且Python会明确地告诉你：abs()有且仅有1个参数，但给出了两个：
数据类型转换函数：
	函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”。like js.

函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回
如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。

外部导入函数：

	如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）：

空函数

	如果想定义一个什么事也不做的空函数，可以用pass语句：

	def nop():
		pass

	实际上pass用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass
	if age >= 18:
		pass


参数检查调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出TypeError.
但是如果参数类型不对，Python解释器就无法帮我们检查。
我们定义的my_abs没有参数检查，会导致if语句出错，出错信息和abs不一样。
def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x
返回多个值原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。
注：
函数执行完毕也没有return语句时，自动return None。


函数的参数

默认参数：
	def power(x, n=2):{
		 ...
	}
	从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：
		1.是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；
		2.是如何设置默认参数。
		当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。
		使用默认参数有什么好处？最大的好处是能降低调用函数的难度。

		也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用enroll('Adam', 'M', city='Tianjin')


	默认参数有个最大的坑
	def add_end(L=[]):
		L.append('END')
		return L

	Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。
	所以，定义默认参数要牢记一点：默认参数必须指向不变对象！
可变参数
	由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：
	def calc(numbers):
		sum = 0
		for n in numbers:
			sum = sum + n * n
		return sum
	但是调用的时候，需要先组装出一个list或tuple：
	>>> calc([1, 2, 3])
	14
	>>> calc((1, 3, 5, 7))
	84
	如果利用可变参数，调用函数的方式可以简化成这样：
	>>> calc(1, 2, 3)
	14>>> calc(1, 3, 5, 7)
	84
	可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。

	def calc(*numbers):
		sum = 0
		for n in numbers:
			sum = sum + n * n
		return sum
	定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。
	如果已经有一个list或者tuple，要调用一个可变参数怎么办？
	Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去：
	>>> nums = [1, 2, 3]
	>>> calc(*nums)
	14
	*nums表示把nums这个list的所有元素作为可变参数传进去。

关键字参数：
	关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict

	>>>def person(name, age, **kw):
			 print('name:', name,'age:', age, 'other',kw)

	函数person除了必选参数name和age外，还接收关键字参数kw。调用时可以只传入必选参数name,age

	也可以传入任意个数的关键字参数：

	>>>person('Bob',30, gender='M', job='Engineer')
	name: Bob age: 35 other: {'city': 'Beijing'}

	关键字参数有什么用？它可以扩展函数的功能。
	也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：
	>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
	>>> person('Jack', 24, city=extra['city'], job=extra['job'])
	name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}

	简写：
	>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
	>>> person('Jack', 24, **extra)
	name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
	*extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra。

命名关键字参数
	如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：
	def person(name, age, *, city, job):
		print(name, age, city, job)

	命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。

	命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：
	>>> person('Jack', 24, 'Beijing', 'Engineer')
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: person() takes 2 positional arguments but 4 were given
	由于调用时缺少参数名city和job，Python解释器把这4个参数均视为位置参数，但person()函数仅接受2个位置参数。

	命名关键字参数可以有缺省值，从而简化调用：
	def person(name, age, *, city='Beijing', job):
		print(name, age, city, job)

	>>> person('Jack', 24, job='Engineer')
	Jack 24 Beijing Engineer
参数组合
	可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，组合使用，
	除了可变参数无法和命名关键字参数混合。
	参数定义的顺序是：必选参数、默认参数、可变参数/命名关键字参数和关键字参数。
	定义一个函数，包含上述若干种参数：
	def f1(a, b, c=0, *args, **kw):
			print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)
	def f2(a, b ,c=0, *, d, **kw):
			print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)

	Python解释器自动按照参数位置和参数名把对应的参数传进去:

	>>>f1(1,2,3)
	a=1 b=2 c=3 args=() kw={}
	>>>f1(1,2,3,'a','b',x=99)
	a=1 b=2 c=3 args=('a','b') kw={'x':99}

	>>> f2(1, 2, d=99, ext=None)
	a=1 b=2 c=3 c=0 d=99 kw={'ext':None}
	最神奇的是通过一个tuple和dict，你也可以调用上述函数：
	>>> args = (1, 2, 3, 4)
	>>> kw = {'d': 99, 'x': '#'}
	>>> f1(*args, **kw)
	a=1 b=2 c=3 args=(4) kw={'d':99, 'x': '#'}
	对于任意函数，都可以通过类似function(*args, **kw)的形式调用它，无论它的参数是如何定义的。

	Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。
	默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！

	function(*args, **kw)
	*args是可变参数，args接收的是一个tuple；
	**kw是关键字参数，kw接收的是一个dict。

	
	