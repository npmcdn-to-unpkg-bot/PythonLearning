Python的字符串:
最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言.
对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
	>>>ord('中')
	20013
	>>> chr(66)
	'B'
	Python对bytes类型的数据用带b前缀的单引号或双引号表示：
	x = b'ABC'
	以Unicode表示的str通过encode()方法可以编码为指定的bytes，
	>>> '中文'.encode('utf-8')
	b'\xe4\xb8\xad\xe6\x96\x87'
	反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()

len()函数:
	计算的是str的字符数，如果换成bytes，len()函数就计算字节数：

	在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
	用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：
	浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：
	所以你看到很多网页的源码上会有类似<meta charset="UTF-8" />的信息，表示该网页正是用的UTF-8编码。

	由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
	#!/usr/bin/env python3
	# -*- coding: utf-8 -*-
	申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码

格式化：
	%运算符。
	在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%?，括号可以省略。
	常见占位符有：
	%d整数     %f浮点数     %x十六进制数

		>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
		'Hi, Michael, you have $1000000.'
		格式化整数和浮点数还可以指定是否补0和整数与小数的位数：
		>>> '%2d-%02d' % (3, 1)
		' 3-01'>>> '%.2f' % 3.1415926'3.14'
	有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%

字符编码：
	在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言
	如果知道字符的整数编码，还可以用十六进制这么写str：
	>>> '\u4e2d\u6587'
	'中文'

	Python对bytes类型的数据用带b前缀的单引号或双引号表示：
	由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。
	Python对bytes类型的数据用带b前缀的单引号或双引号表示：x = b'ABC'
	纯英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。
		含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错

	当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行
		#!/usr/bin/env python3 		//第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
		# -*- coding: utf-8 -*- 	//第二行注释告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。
	
	确保文本编辑器正在使用UTF-8 without BOM编码：

	>>> len('ABCD')
	4


