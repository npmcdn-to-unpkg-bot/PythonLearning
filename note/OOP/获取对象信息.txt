使用type：
1.基本类型可用
	>>> type(123)
		<class 'int'>
	>>> type('str')
		<class 'str'>
	>>> type(None)
		<type(None)'NoneType'>

2.一个变量指向函数或类，，也可以用type()判断：
	>>> type(abs)
	<class 'builtin_function_or_method'>
	
	>>> type(a)
	<class '__main__.Animal'>

3.如果需要比较两个变量类型是否相同：
	>>> type(123)==int
	True
	>>> type('abc')==type('123')
	True
	>>> type('abc')==str
	True
	如果要判断一个对象是否是函数：
	>>>import types
	>>>def fn():
				  pass
	>>>type(fn)==type.FunctionType
	True
	>>>type(abs)==type.BuiltinFunctionType
	True
	>>>type(lambda x: x)==types.LambdaType
	True
	>>>type((x for x in range(10)))==types.generatorType
	True

isinstance():对于class的继承关系来说，使用type()不是很方便。
	isinstance()判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。
	>>> isinstance(d, Dog)
	False
	还可以判断一个变量是否是某个类型中的一种：
	>>> isinstance([1, 2, 3], (list, tuple))
	True
	>>> isinstance((1, 2, 3), (list, tuple))
	True
dir():
	获取一个包含字符串的list，返回对象的所有属性和方法：
	>>> dir('ABC')
	['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__',

	'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
	类似__xxx__的属性和方法在Python中是一种特殊用途：
	例如__len__方法返回长度。调用len()函数获取一个对象长度时，实际在len()函数内部，会自动调用该对象的__len()方法
	>>> len('ABC')
	>>> 'ABC'.__len__()
	3
	自定义的类，如果也想用len(myObject),就需要自定义__len__()方法：
	>>> class MyDog(object):
	...     def __len__(self):
	...         return 100
	...
	>>> dog = MyDog()
	>>> len(dog)
	100

配合getattr()、setattr()以及hasattr()：可以直接操作一个对象的状态：
	>>> hasattr(obj, 'x') # 有属性'x'吗？
	True
	>>> obj.x
	9
	>>> hasattr(obj, 'y') # 有属性'y'吗？
	False
	>>> setattr(obj, 'y', 19) # 设置一个属性'y'
	>>> hasattr(obj, 'y') # 有属性'y'吗？
	True
	>>> getattr(obj, 'y') # 获取属性'y'
	19
	>>> obj.y # 获取属性'y'
	19
也可以获得对象的方法：
	>>> hasattr(obj, 'power') # 有属性'power'吗？
	True
	>>> getattr(obj, 'power') # 获取属性'power'
	<bound method MyObject.power of <__main__.MyObject object at 0x10077a6a0>>
	>>> fn = getattr(obj, 'power') # 获取属性'power'并赋值到变量fn
	>>> fn # fn指向obj.power
	<bound method MyObject.power of <__main__.MyObject object at 0x10077a6a0>>
	>>> fn() # 调用fn()与调用obj.power()是一样的
	81
通过内置的一系列函数，可以对任意一个Python对象剖析，拿到内部的数据。
	注意：只有在不知道对象信息的时候，我们才会去获取对象信息。
	如果可以直接写：
	sum = obj.x + obj.y
	就不要写：
	sum = getattr(obj, 'x') + getattr(obj, 'y')


