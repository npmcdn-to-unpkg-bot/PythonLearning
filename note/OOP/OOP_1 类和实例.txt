面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。
为了简化程序设计，面向过程把函数切分为子函数，把大块函数切割成小块函数来降低系统的复杂度。
面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，
计算机程序的执行就是一系列消息在各个对象之间传递。

面向对象的抽象程度又比函数要高，因为一个class即包含数据，又包含操作数据的方法。

面向对象的最重要的概念就是类（class）和实例（Instance）。

1.类和实例
	Python中定义类：

	>>>class Student(object):
		   pass
	# class后面紧接着类名，类名通常是大写开头的单词，紧接着是(object),表示该类是从哪个类继承下来的。
	# 所有类的父类object

	创建实例是通过 类名() 实现的：
	>>> bart = Student()
	>>> bart
	<__main__.Student object at 0x10a67a590>
	>>> Student
	<class '__main__.Student'>

	# 给实例bart绑定一个name属性：
	>>> bart.name = 'Bart Simpson'
	# 在创建实例的时候，可以把一些我们认为必须绑定的属性强制填写进去
	class Student(object):
		 def __init__(self, name, score):
			  self.name = name
			  self.score = score
	这里__init__方法的第一个参数永远是self，表示创建的实例本身。
	因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。
	再创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，self不用传。
	>>> bart = Student('Bart Simpson', 59)
	>>> bart.name
	'Bart Simpson'
	>>> bart.score
	59
	和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数。
	除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。

	定义一个方法，除了第一个参数是self外，其他和普通函数一样。
	class Student(object):

		def __init__(self, name, score):
			self.name = name
			self.score = score

		def print_score(self):
			print('%s: %s' % (self.name, self.score))
	要调用一个方法，只需要在实例变量上直接调用，除了self不用传递，其他参数正常传入。

	和静态语言不同，Python允许对实例变量绑定任何数据：对于两个实例变量，虽然他们都是一个类的不同实例，但拥有的变量名称都可能不同：

	class Student(object):
		 def __init__(self,name,age):
			  self.name = name
			  self.age = age
		 def printInfo(self):
			  print('Hello, my name is %s,i\'m %s years old !' %(self.name, self.age))

	st1 = Student('Bary', 26)
	st2 = Student('Oliver',31)

	st1.score = 95
	print(st1.score)
	print(st2.score)
	# 输出结果：
	95
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	AttributeError: 'Student' object has no attribute 'age'

2.访问限制
	有没有发现，外部代码还是可以自由地修改一个实例的name、score属性。
	如果要让内部属性不被外部访问，可以把属性名称前加上两个下划线__,在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private）,只有内部可以访问，外部不可以访问。
	class Student(object):

		def __init__(self, name, score):
			self.__name = name
			self.__score = score

		def print_score(self):
			print('%s: %s' % (self.__name, self.__score))
	对于外部代码来说，已经无法从外部访问实例变量.__name和实例变量.__score了：
	>>> bart = Student('Bart Simpson', 98)
	>>> bart.__name
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	AttributeError: 'Student' object has no attribute '__name'
	如果外部代码要获取name和score怎么办？可以给Student类增加get_name和get_score这样的方法，
	如果又要允许外部代码修改score怎么办？可以再给Student类增加set_score方法：
	class Student(object):
		...

		def set_score(self, score):
			self.__score = score
		 这里可以读参数作检查，避免传入无效参数：
		  if 0 <= score <= 100:
				self.__score = score
		  else:
				raise ValueError('bad score')
3.其他：
	变量名类似__xxx__(双下划线开头和结尾的)，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以不能用__name__、__score__这样的变量名。

	下划线开头的实例变量名，例如_name,这样的实例变量是可以访问的。但是，按照约定俗成的规定，意思是：
	“虽然我可以被访问，但是请把我视为私有变量，不用随意访问”。

	私有变量（private）是不是一定不能从外部访问呢？其实不是。不能直接访问_name是因为Python解释器把__name变量改成了__Student_name,
	所以，仍然可以通过_Student_name来访问__name变量:
	>>> bart._Student__name
	'Bart Simpson'
	但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把__name改成不同的变量名。

	总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。



