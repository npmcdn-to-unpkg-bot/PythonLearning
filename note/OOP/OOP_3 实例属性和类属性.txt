Python是动态语言，根据类创建的实例可以任意绑定属性。

1.给实例变量绑定属性的方法是通过实例变量，或者通过self变量：
     >>> class Student(object):
          def __init__(self, name):
     >>>s = Student('Bob')
     >>>s.score = 90
2.给类本身绑定属性，可以直接在class中定义属性，这种属性称为类属性
     >>> class Student（object):
			name = 'Student'
	 >>> class Student(object):
	 ...     name = 'Student'
	 ...
	 >>> s = Student() # 创建实例s
	 >>> print(s.name) # 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性
	 Student
	 >>> print(Student.name) # 打印类的name属性
	 Student
	 >>> s.name = 'Michael' # 给实例绑定name属性
	 >>> print(s.name) # 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性
	 Michael
	 >>> print(Student.name) # 但是类属性并未消失，用Student.name仍然可以访问
	 Student
	 >>> del s.name # 如果删除实例的name属性
	 >>> print(s.name) # 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了
	 Student
在编写程序时，不要把实例属性和类属性使用相同的名字。相同名称的实例属性将屏蔽掉类属性，
当你删除掉实例属性后，再使用相同的名称，访问到的是类属性。

